
// Create Transient Database - will be used by user "AUDIENCEUSER"
CREATE TRANSIENT DATABASE TROVO;


// Disable Time-Travel
ALTER DATABASE TROVO
SET DATA_RETENTION_TIME_IN_DAYS=0;

// Create Transient Table for B2C
CREATE OR REPLACE TRANSIENT TABLE B2C (
    
        
)


// Data will be copied to these tables, from S3, once


// Create Transient Table for UNIVERSAL_PERSON
CREATE TRANSIENT TABLE TROVO.PUBLIC.UNIVERSAL_PERSON (
    UP_ID STRING,
	FIRST_NAME VARCHAR(16777216),
	LAST_NAME VARCHAR(16777216),
	BUSINESS_EMAIL VARCHAR(16777216),
	PROGRAMMATIC_BUSINESS_EMAILS STRING,  -- Determine data type (could be STRING - we used "LIKE" in some places of the code, so STRING could be more optimal)
	MOBILE_PHONE VARCHAR(16777216),
	DIRECT_NUMBER VARCHAR(16777216),
	PERSONAL_PHONE VARCHAR(16777216),
	LINKEDIN_URL VARCHAR(16777216),
	PERSONAL_ADDRESS VARCHAR(16777216),
	PERSONAL_ADDRESS_2 VARCHAR(16777216),
	PERSONAL_CITY VARCHAR(16777216),
	PERSONAL_STATE VARCHAR(16777216),
	PERSONAL_ZIP VARCHAR(16777216),
	PERSONAL_ZIP4 VARCHAR(16777216),
	PERSONAL_EMAILS VARCHAR(16777216),
	ADDITIONAL_PERSONAL_EMAILS VARCHAR(16777216),
	GENDER VARCHAR(16777216),
	AGE_RANGE VARCHAR(16777216),
	MARRIED VARCHAR(16777216),
	CHILDREN VARCHAR(16777216),
	INCOME_RANGE VARCHAR(16777216),
	NET_WORTH VARCHAR(16777216),
	HOMEOWNER VARCHAR(16777216),
	JOB_TITLE VARCHAR(16777216),
	SENIORITY_LEVEL VARCHAR(16777216),
	DEPARTMENT VARCHAR(16777216),
	PROFESSIONAL_ADDRESS VARCHAR(16777216),
	PROFESSIONAL_ADDRESS2 VARCHAR(16777216),
	PROFESSIONAL_CITY VARCHAR(16777216),
	PROFESSIONAL_STATE VARCHAR(16777216),
	PROFESSIONAL_ZIP VARCHAR(16777216),
	PROFESSIONAL_ZIP4 VARCHAR(16777216),
	COMPANY_NAME VARCHAR(16777216),
	COMPANY_DOMAIN VARCHAR(16777216),
	COMPANY_PHONE VARCHAR(16777216),
	COMPANY_SIC VARCHAR(16777216),
	COMPANY_ADDRESS VARCHAR(16777216),
	COMPANY_CITY VARCHAR(16777216),
	COMPANY_STATE VARCHAR(16777216),
	COMPANY_ZIP VARCHAR(16777216),
	COMPANY_LINKEDIN_URL VARCHAR(16777216),
	COMPANY_REVENUE VARCHAR(16777216),
	COMPANY_EMPLOYEE_COUNT VARCHAR(16777216),
	PRIMARY_INDUSTRY VARCHAR(16777216),
	BUSINESS_EMAIL_VALIDATION_STATUS VARCHAR(16777216),
	BUSINES_EMAIL_LAST_SEEN TIMESTAMP_NTZ(9),
	PERSONAL_EMAIL_LAST_SEEN_VALIDATION_STATUS VARCHAR(16777216),
	PERSONAL_EMAIL_LAST_SEEN TIMESTAMP_NTZ(9),
	COMPANY_LAST_UPDATED TIMESTAMP_NTZ(9),
	JOB_TITLE_LAST_UPDATED TIMESTAMP_NTZ(9),
	LAST_UPDATED TIMESTAMP_NTZ(9)
    // WORK_HISTORY, -- take these out, for the time being
    // EDUCATION_HISTORY
	// CC_ID STRING
    // COMPANY_DESCRIPTION, -- this one, as well 
    // RELATED_DOMAINS
);


// Create Transient Table for B2C 
CREATE OR REPLACE TRANSIENT TABLE TROVO.PUBLIC.B2C (
UP_ID STRING,
FIRST_NAME STRING,
LAST_NAME STRING,
PERSONAL_EMAILS STRING,
ADDITIONAL_PERSONAL_EMAILS STRING, -- Determine data type (could be STRING - we used "LIKE" in some places of the code, so STRING could be more optimal)
PERSONAL_ADDRESS VARCHAR(16777216),
PERSONAL_ADDRESS_2 VARCHAR(16777216),
PERSONAL_CITY VARCHAR(16777216),
PERSONAL_STATE VARCHAR(16777216),
PERSONAL_ZIP VARCHAR(16777216),
PERSONAL_ZIP4 VARCHAR(16777216),
// LATITUDE DOUBLE -- ignore
// LONGITUDE DOUBLE -- same
MOBILE_PHONE STRING,
PERSONAL_PHONE STRING,
DPV_CODE STRING,
GENDER STRING,
AGE_RANGE STRING,
MARRIED STRING,
CHILDREN STRING,
INCOME_RANGE STRING,
NET_WORTH STRING,
HOMEOWNER STRING,
PERSONAL_EMAILS_VALIDATION_STATUS STRING,
PERSONAL_EMAILS_LAST_SEEN TIMESTAMP_NTZ(9) -- double check
);


// Disable Time-Travel
ALTER TABLE TROVO.PUBLIC.UNIVERSAL_PERSON
SET DATA_RETENTION_TIME_IN_DAYS=0;

ALTER TABLE TROVO.PUBLIC.B2C
SET DATA_RETENTION_TIME_IN_DAYS=0;


SHOW STORAGE INTEGRATIONS;
DESC STORAGE INTEGRATION S3_INTEGRATION;
DESC STORAGE INTEGRATION FOUR_EYES_INTEGRATION;


// Try to use this already created stage
@AUDIENCELAB_INTERNAL_PROD.RAW_DATA.TROVO_ADSLAB_STAGE/universal_person_2_2_0;
@AUDIENCELAB_INTERNAL_PROD.RAW_DATA.TROVO_ADSLAB_STAGE/b2c_2_3_0;

LIST @AUDIENCELAB_INTERNAL_PROD.RAW_DATA.TROVO_ADSLAB_STAGE/universal_person_2_2_0;
LIST @AUDIENCELAB_INTERNAL_PROD.RAW_DATA.TROVO_ADSLAB_STAGE/b2c_2_3_0;














// Create File Formats:

// Create Universal Person File Format:
CREATE OR REPLACE FILE FORMAT TROVO.PUBLIC.UNIVERSAL_PERSON_FILE_FORMAT
TYPE='CSV'
FIELD_DELIMITER=','
COMPRESSION=GZIP
SKIP_HEADER=1
FIELD_OPTIONALLY_ENCLOSED_BY='"';

// Create B2C File Format:
CREATE OR REPLACE FILE FORMAT TROVO.PUBLIC.B2C_FILE_FORMAT
TYPE='CSV'
FIELD_DELIMITER=','
COMPRESSION=GZIP
SKIP_HEADER=1
FIELD_OPTIONALLY_ENCLOSED_BY='"';


// COPY statement to copy data from S3 into tables 




// COPY INTO UNIVERSAL_PERSON table -- all these fields' positions need to be double checked, as they are not the same in the .csv files
COPY INTO TROVO.PUBLIC.UNIVERSAL_PERSON
FROM (
SELECT 
    T.$1 AS UP_ID,
    T.$2 AS FIRST_NAME,
    T.$3 AS LAST_NAME,
    T.$4 AS BUSINESS_EMAIL,
    T.$5 AS PROGRAMMATIC_BUSINESS_EMAILS,
    T.$6 AS MOBILE_PHONE,
    T.$7 AS DIRECT_NUMBER,
    T.$8 AS PERSONAL_PHONE,
    T.$9 AS LINKEDIN_URL,
    T.$10 AS PERSONAL_ADDRESS,
    T.$11 AS PERSONAL_ADDRESS_2,
	T.$12 AS PERSONAL_CITY,
	T.$13 AS PERSONAL_STATE,
	T.$14 AS PERSONAL_ZIP,
	T.$15 AS PERSONAL_ZIP4,
	T.$16 AS PERSONAL_EMAILS,
    T.$17 AS ADDITIONAL_PERSONAL_EMAILS, -- this probably needs to be formatted
	T.$18 AS GENDER,
	T.$19 AS AGE_RANGE,
	T.$20 AS MARRIED,
	T.$21 AS CHILDREN,
	T.$22 AS INCOME_RANGE,
	T.$23 AS NET_WORTH,
	T.$24 AS HOMEOWNER,
	T.$25 AS JOB_TITLE,
	T.$26 AS SENIORITY_LEVEL,
	T.$27 AS DEPARTMENT,
    T.$28 AS PROFESSIONAL_ADDRESS,
	T.$29 AS PROFESSIONAL_ADDRESS2,
	T.$30 AS PROFESSIONAL_CITY,
	T.$31 AS PROFESSIONAL_STATE,
	T.$32 AS PROFESSIONAL_ZIP,
	T.$33 AS PROFESSIONAL_ZIP4,
    T.$34 AS COMPANY_NAME,
	T.$35 AS COMPANY_DOMAIN,
	T.$36 AS COMPANY_PHONE,
	T.$37 AS COMPANY_SIC,
	T.$38 AS COMPANY_ADDRESS,
	T.$39 AS COMPANY_CITY,
	T.$40 AS COMPANY_STATE,
	T.$41 AS COMPANY_ZIP,
	T.$42 AS COMPANY_LINKEDIN_URL,
	T.$43 AS COMPANY_REVENUE,
	T.$44 AS COMPANY_EMPLOYEE_COUNT,
    T.$45 AS PRIMARY_INDUSTRY,
	T.$46 AS BUSINESS_EMAIL_VALIDATION_STATUS,
	TO_TIMESTAMP(T.$47) AS BUSINES_EMAIL_LAST_SEEN,
	T.$48 AS PERSONAL_EMAILS_VALIDATION_STATUS,
	TO_TIMESTAMP(T.$49) AS PERSONAL_EMAILS_LAST_SEEN,
	TO_TIMESTAMP(T.$50) AS COMPANY_LAST_UPDATED,
	TO_TIMESTAMP(T.$51) AS JOB_TITLE_LAST_UPDATED,
	TO_TIMESTAMP(CAST(T.$52 as BIGINT)) AS LAST_UPDATED

    FROM @AUDIENCELAB_INTERNAL_PROD.RAW_DATA.TROVO_ADSLAB_STAGE/universal_person_2_2_0/
    (FILE_FORMAT => TROVO.PUBLIC.UNIVERSAL_PERSON_FILE_FORMAT) T

);


// COPY INTO B2C table:
COPY INTO TROVO.PUBLIC.B2C
FROM (
SELECT 
        T.$1 AS UP_ID,
        T.$2 AS FIRST_NAME,
        T.$3 AS LAST_NAME,
        T.$4 AS PERSONAL_EMAILS,
        T.$5 AS ADDITIONAL_PERSONAL_EMAILS, -- Determine data type (could be STRING - we used "LIKE" in some places of the code, so STRING could be more optimal)
        T.$6 AS PERSONAL_ADDRESS,
        T.$7 AS PERSONAL_ADDRESS_2,
        T.$8 AS PERSONAL_CITY,
        T.$9 AS PERSONAL_STATE,
        T.$10 AS PERSONAL_ZIP,
        T.$11 AS PERSONAL_ZIP4,
        // LATITUDE DOUBLE -- ignore
        // LONGITUDE DOUBLE -- same
        T.$14 AS MOBILE_PHONE,
        T.$15 AS PERSONAL_PHONE,
        T.$16 AS DPV_CODE,
        T.$17 AS GENDER,
        T.$18 AS AGE_RANGE,
        T.$19 AS MARRIED,
        T.$20 AS CHILDREN,
        T.$21 AS INCOME_RANGE,
        T.$22 AS NET_WORTH,
        T.$23 AS HOMEOWNER,
        T.$24 AS PERSONAL_EMAILS_VALIDATION_STATUS,
        TO_TIMESTAMP(T.$25) AS PERSONAL_EMAILS_LAST_SEEN

    FROM @AUDIENCELAB_INTERNAL_PROD.RAW_DATA.TROVO_ADSLAB_STAGE/b2c_2_3_0/
    (FILE_FORMAT => TROVO.PUBLIC.B2C_FILE_FORMAT) T
);




USE DATABASE TROVO;


SHOW STORAGE INTEGRATIONS;










// Validate Tables
SELECT * FROM TROVO.PUBLIC.UNIVERSAL_PERSON LIMIT 10000;
SELECT * FROM TROVO.PUBLIC.B2C LIMIT 10000;


















// COPY INTO UNIVERSAL_PERSON table -- all these fields' positions need to be double checked, as they are not the same in the .csv files
COPY INTO AUDIENCELAB_INTERNAL_PROD.PUBLIC.UNIVERSAL_PERSON
FROM (
SELECT 
    T.$1 AS UP_ID,
    T.$2 AS FIRST_NAME,
    T.$3 AS LAST_NAME,
    T.$4 AS BUSINESS_EMAIL,
    T.$5 AS PROGRAMMATIC_BUSINESS_EMAILS,
    T.$6 AS MOBILE_PHONE,
    T.$7 AS DIRECT_NUMBER,
    T.$8 AS PERSONAL_PHONE,
    T.$9 AS LINKEDIN_URL,
    T.$10 AS PERSONAL_ADDRESS,
    T.$11 AS PERSONAL_ADDRESS_2,
	T.$12 AS PERSONAL_CITY,
	T.$13 AS PERSONAL_STATE,
	T.$14 AS PERSONAL_ZIP,
	T.$15 AS PERSONAL_ZIP4,
	T.$16 AS PERSONAL_EMAILS,
    T.$17 AS ADDITIONAL_PERSONAL_EMAILS, -- this probably needs to be formatted
	T.$18 AS GENDER,
	T.$19 AS AGE_RANGE,
	T.$20 AS MARRIED,
	T.$21 AS CHILDREN,
	T.$22 AS INCOME_RANGE,
	T.$23 AS NET_WORTH,
	T.$24 AS HOMEOWNER,
	T.$25 AS JOB_TITLE,
	T.$26 AS SENIORITY_LEVEL,
	T.$27 AS DEPARTMENT,
    T.$28 AS PROFESSIONAL_ADDRESS,
	T.$29 AS PROFESSIONAL_ADDRESS2,
	T.$30 AS PROFESSIONAL_CITY,
	T.$31 AS PROFESSIONAL_STATE,
	T.$32 AS PROFESSIONAL_ZIP,
	T.$33 AS PROFESSIONAL_ZIP4,
    T.$34 AS COMPANY_NAME,
	T.$35 AS COMPANY_DOMAIN,
	T.$36 AS COMPANY_PHONE,
	T.$37 AS COMPANY_SIC,
	T.$38 AS COMPANY_ADDRESS,
	T.$39 AS COMPANY_CITY,
	T.$40 AS COMPANY_STATE,
	T.$41 AS COMPANY_ZIP,
	T.$42 AS COMPANY_LINKEDIN_URL,
	T.$43 AS COMPANY_REVENUE,
	T.$44 AS COMPANY_EMPLOYEE_COUNT,
    T.$45 AS PRIMARY_INDUSTRY,
	T.$46 AS BUSINESS_EMAIL_VALIDATION_STATUS,
	TO_TIMESTAMP(T.$47) AS BUSINES_EMAIL_LAST_SEEN,
	T.$48 AS PERSONAL_EMAILS_VALIDATION_STATUS,
	TO_TIMESTAMP(T.$49) AS PERSONAL_EMAILS_LAST_SEEN,
	TO_TIMESTAMP(T.$50) AS COMPANY_LAST_UPDATED,
	TO_TIMESTAMP(T.$51) AS JOB_TITLE_LAST_UPDATED,
	TO_TIMESTAMP(CAST(T.$52 as BIGINT)) AS LAST_UPDATED

    FROM @AUDIENCELAB_INTERNAL_PROD.RAW_DATA.TROVO_ADSLAB_STAGE/universal_person_2_1_0/universal_person_0_0_0.csv.gz
    (FILE_FORMAT => TROVO.PUBLIC.UNIVERSAL_PERSON_FILE_FORMAT) T







    

);











// Grant permissions to user AUDIENCEUSER, which has the PIXEL_AGENT role
GRANT USAGE ON DATABASE TROVO TO ROLE PIXEL_AGENT;
GRANT USAGE ON SCHEMA TROVO.PUBLIC TO ROLE PIXEL_AGENT;
GRANT SELECT ON ALL TABLES IN SCHEMA TROVO.PUBLIC TO ROLE PIXEL_AGENT;
GRANT SELECT ON FUTURE TABLES IN SCHEMA TROVO.PUBLIC TO ROLE PIXEL_AGENT;


// Validate
SELECT * FROM TROVO.PUBLIC.B2C LIMIT 1000;
SELECT * FROM TROVO.PUBLIC.UNIVERSAL_PERSON LIMIT 100;